/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserIndexRouteImport } from './routes/user/index'
import { Route as UserManageRouteImport } from './routes/user/manage'
import { Route as UserLoginRouteImport } from './routes/user/login'

const UserIndexRoute = UserIndexRouteImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserManageRoute = UserManageRouteImport.update({
  id: '/user/manage',
  path: '/user/manage',
  getParentRoute: () => rootRouteImport,
} as any)
const UserLoginRoute = UserLoginRouteImport.update({
  id: '/user/login',
  path: '/user/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/user/login': typeof UserLoginRoute
  '/user/manage': typeof UserManageRoute
  '/user': typeof UserIndexRoute
}
export interface FileRoutesByTo {
  '/user/login': typeof UserLoginRoute
  '/user/manage': typeof UserManageRoute
  '/user': typeof UserIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/user/login': typeof UserLoginRoute
  '/user/manage': typeof UserManageRoute
  '/user/': typeof UserIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/user/login' | '/user/manage' | '/user'
  fileRoutesByTo: FileRoutesByTo
  to: '/user/login' | '/user/manage' | '/user'
  id: '__root__' | '/user/login' | '/user/manage' | '/user/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  UserLoginRoute: typeof UserLoginRoute
  UserManageRoute: typeof UserManageRoute
  UserIndexRoute: typeof UserIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user/': {
      id: '/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/manage': {
      id: '/user/manage'
      path: '/user/manage'
      fullPath: '/user/manage'
      preLoaderRoute: typeof UserManageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/login': {
      id: '/user/login'
      path: '/user/login'
      fullPath: '/user/login'
      preLoaderRoute: typeof UserLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  UserLoginRoute: UserLoginRoute,
  UserManageRoute: UserManageRoute,
  UserIndexRoute: UserIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
