---
// this is generated at build time so fetch the results from the d1 object binding
import { and, eq } from 'drizzle-orm';
import { getDb } from '../../db/index.js';
import {
  categories,
  contests,
  judges,
  results,
  submissions,
} from '../../db/schema.js';
import TopWinnerImage from './TopWinnerImage.astro';

type Props = {
  contestId: string;
};

const { contestId } = Astro.props;

if (!Astro.locals.runtime.env.DB) {
  throw new Error('DB is not available');
}

const db = getDb(Astro.locals.runtime.env.DB);

// Fetch contest details to get the actual title
const contestDetails = await db
  .select({ name: contests.name })
  .from(contests)
  .where(eq(contests.id, contestId))
  .limit(1);

const contestTitle = contestDetails[0]?.name || contestId;

// Fetch only first place winners for the specified contest across all categories
// This is the corrected query.
// It uses 'and()' to combine the two conditions for the SQL WHERE clause.
const firstPlaceWinners = await db
  .select({
    result: results.result,
    firstName: results.firstName,
    lastName: results.lastName,
    submissionId: results.submissionId,
    title: submissions.title,
    categoryId: submissions.categoryId,
    r2Key: submissions.r2Key,
    originalFilename: submissions.originalFilename,
  })
  .from(results)
  .innerJoin(submissions, eq(results.submissionId, submissions.id))
  .where(
    and(eq(submissions.contestId, contestId), eq(results.result, 'first'))
  );

// Get category names
const categoryIds = [...new Set(firstPlaceWinners.map(w => w.categoryId))];
const categoryMap = new Map();
if (categoryIds.length > 0) {
  const categoryData = await db
    .select({ id: categories.id, name: categories.name })
    .from(categories)
    .where(
      categoryIds
        .map(id => eq(categories.id, id))
        .reduce((acc, condition) => acc || condition)
    );

  categoryData.forEach(cat => categoryMap.set(cat.id, cat.name));
}

// Get judges for the specified contest
const contestJudges = await db
  .select({ fullName: judges.fullName })
  .from(judges)
  .where(eq(judges.contestId, contestId))
  .orderBy(judges.fullName);

// Process images - using direct R2 URLs for now
const processedImages = firstPlaceWinners.map(result => {
  const categoryName = categoryMap.get(result.categoryId) || result.categoryId;

  // Use our public images API route with optimization for web delivery
  const imageUrl = `/api/publicImages/${result.r2Key}`;

  return {
    ...result,
    imageUrl,
    categoryName,
    displayName:
      result.firstName && result.lastName
        ? `${result.firstName} ${result.lastName}`
        : 'Anonymous',
  };
});
---

<div class="max-w-7xl mx-auto py-16 px-6">
  <div class="text-center">
    <h1 class="text-5xl font-light text-gray-50 tracking-tight">
      {contestTitle} Winners
    </h1>
  </div>

  <div class="mt-12 space-y-6">
    <h2 class="text-3xl font-light text-gray-100 text-center">JURY</h2>
    <ul class="text-xl flex flex-col items-center space-y-3 text-gray-300">
      {contestJudges.map(judge => <li class="font-black">{judge.fullName}</li>)}
    </ul>
  </div>

  <!-- First Place Winners by Category -->
  <div class="mt-24 space-y-16">
    {
      processedImages.length > 0 ? (
        processedImages.map((winner, index) => (
          <div class="space-y-4">
            <TopWinnerImage
              flipTitle={index % 2 === 1}
              result={`${winner.categoryName} Winner`}
              imageUrl={winner.imageUrl}
              title={winner.title}
              displayName={winner.displayName}
              categoryName={winner.categoryName}
            />
          </div>
        ))
      ) : (
        <div class="text-center py-16">
          <h3 class="text-2xl font-light text-gray-400">
            No winners found for {contestTitle}
          </h3>
          <p class="text-gray-500 mt-4">
            This contest may not have any submissions or results yet.
          </p>
        </div>
      )
    }
  </div>
</div>
