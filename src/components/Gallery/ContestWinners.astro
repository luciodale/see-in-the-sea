---
// this is generated at build time so fetch the results from the d1 object binding
import { and, eq } from 'drizzle-orm';
import { getDb } from '../../db/index.js';
import { categories, results, submissions } from '../../db/schema.js';
import Jury from './Jury.astro';
import TopWinnerImage from './TopWinnerImage.astro';

type Props = {
  contestId: string;
  contestTitle: string;
};

const { contestId, contestTitle } = Astro.props;

if (!Astro.locals.runtime.env.DB) {
  throw new Error('DB is not available');
}

const db = getDb(Astro.locals.runtime.env.DB);

// Fetch only first place winners for the specified contest across all categories
// This is the corrected query.
// It uses 'and()' to combine the two conditions for the SQL WHERE clause.
const firstPlaceWinners = await db
  .select({
    result: results.result,
    firstName: results.firstName,
    lastName: results.lastName,
    submissionId: results.submissionId,
    title: submissions.title,
    categoryId: submissions.categoryId,
    r2Key: submissions.r2Key,
    originalFilename: submissions.originalFilename,
  })
  .from(results)
  .innerJoin(submissions, eq(results.submissionId, submissions.id))
  .where(
    and(eq(submissions.contestId, contestId), eq(results.result, 'first'))
  );

// Get category names
const categoryIds = [...new Set(firstPlaceWinners.map(w => w.categoryId))];
const categoryMap = new Map<string, string>();
if (categoryIds.length > 0) {
  const categoryData = await db
    .select({ id: categories.id, name: categories.name })
    .from(categories)
    .where(
      categoryIds
        .map(id => eq(categories.id, id))
        .reduce((acc, condition) => acc || condition)
    );

  categoryData.forEach(cat => categoryMap.set(cat.id, cat.name));
}

// Judges are now handled by the Jury component

// Process images - using direct R2 URLs for now
const processedImages = firstPlaceWinners.map(result => {
  const categoryName = categoryMap.get(result.categoryId) || result.categoryId;

  // Use our public images API route with optimization for web delivery
  const imageUrl = `/api/publicImages/${result.r2Key}`;

  return {
    ...result,
    imageUrl,
    categoryName,
    author:
      result.firstName && result.lastName
        ? `${result.firstName} ${result.lastName}`
        : 'Anonymous',
  };
});
---

<div class="text-center">
  <h1 class="text-5xl font-thin text-gray-50 uppercase">
    {contestTitle}
  </h1>
</div>

<Jury contestId={contestId} />

<div class="mt-24 space-y-16">
  {
    processedImages.length > 0 ? (
      processedImages.map(winner => (
        <div class="space-y-4">
          <TopWinnerImage
            result={`${winner.categoryName} Winner`}
            imageUrl={winner.imageUrl}
            title={winner.title}
            author={winner.author}
          />
        </div>
      ))
    ) : (
      <div class="text-center py-16">
        <h3 class="text-2xl font-light text-gray-400">
          No winners found for {contestTitle}
        </h3>
        <p class="text-gray-500 mt-4">
          This contest may not have any submissions or results yet.
        </p>
      </div>
    )
  }
</div>
